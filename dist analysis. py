import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import warnings

warnings.filterwarnings("ignore")

# Load Excel file (first sheet)
file_path = "err_dist.xlsx"
df = pd.read_excel(file_path, sheet_name=0)
df = df.dropna()

# Distributions to try
distributions = ['norm', 'expon', 'gamma', 'lognorm', 'beta', 'weibull_min', 'weibull_max']

# Store results
best_fits = {}
all_metrics = []

# Function to compute AIC
def compute_aic(dist, data, params):
    log_likelihood = np.sum(dist.logpdf(data, *params))
    k = len(params)
    return 2 * k - 2 * log_likelihood

# Loop through columns
for col in df.columns:
    data = df[col].dropna()
    dist_metrics = []

    for dist_name in distributions:
        try:
            dist = getattr(stats, dist_name)
            params = dist.fit(data)

            # AIC
            aic = compute_aic(dist, data, params)

            # Kolmogorov-Smirnov
            ks_stat, ks_p = stats.kstest(data, dist_name, args=params)

            # Anderson-Darling (only for norm, expon, logistic, gumbel)
            ad_stat = None
            if dist_name in ['norm', 'expon', 'logistic']:
                ad_result = stats.anderson(data, dist=dist_name)
                ad_stat = ad_result.statistic
            else:
                ad_stat = np.nan  # not available for all distributions

            dist_metrics.append({
                "Column": col,
                "Distribution": dist_name,
                "AIC": aic,
                "KS_Statistic": ks_stat,
                "KS_p_value": ks_p,
                "AD_Statistic": ad_stat,
                "Parameters": params
            })
        except Exception as e:
            print(f"Error fitting {dist_name} on {col}: {e}")

    # Pick best distribution by AIC
    best = min(dist_metrics, key=lambda x: x["AIC"])
    best_fits[col] = best
    all_metrics.extend(dist_metrics)

# Convert metrics to DataFrame for display
metrics_df = pd.DataFrame(all_metrics)
print("\nüîç All Distribution Fit Metrics:")
print(metrics_df)

print("\n‚úÖ Best-Fit Distributions (by AIC):")
print(pd.DataFrame(best_fits).T[["Distribution", "AIC", "KS_p_value", "AD_Statistic"]])

# Plotting
fig, axes = plt.subplots(len(df.columns), 1, figsize=(10, len(df.columns) * 3))
if len(df.columns) == 1:
    axes = [axes]

for i, col in enumerate(df.columns):
    data = df[col].dropna()
    dist_name = best_fits[col]["Distribution"]
    params = best_fits[col]["Parameters"]
    dist = getattr(stats, dist_name)
    x = np.linspace(data.min(), data.max(), 100)

    sns.histplot(data, kde=False, stat="density", ax=axes[i], bins=30, color='lightgrey')
    axes[i].plot(x, dist.pdf(x, *params), label=f'{dist_name} fit', color='orange')
    axes[i].legend()
    axes[i].set_title(f"{col} - Best Fit: {dist_name} (AIC: {round(best_fits[col]['AIC'], 2)})")

plt.suptitle("L/T P", fontsize=16)
plt.tight_layout(rect=[0, 0, 1, 0.97])
plt.show()